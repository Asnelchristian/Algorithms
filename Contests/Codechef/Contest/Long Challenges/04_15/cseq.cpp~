#include<stdio.h>
#include <iostream>
#include <algorithm>
#include <math.h>
#define MOD 1000003
using namespace std;

int fact[800001], invfact[800001];
int powmod(int base, int expo){
	if(expo==0)
		return 1;
	else if(expo&1)
		return (long long)base*powmod(base, expo-1)%MOD;
	else{
		int root=powmod(base, expo>>1);
		return (long long)root*root%MOD;
	}
}
int inverse(int x){
	return powmod(x, MOD-2);
}
void init(){
	fact[0]=1;
	for(int i=1; i<=800000; i++)
		fact[i]=(long long)i*fact[i-1]%MOD;
	invfact[800000]=inverse(fact[800000]);
	for(int i=800000; i>0; i--)
		invfact[i-1]=(long long)i*invfact[i]%MOD;
}
int C(int n, int r){
	if(r>n || r<0)
		return 0;
	return (long long)((long long)fact[n]*invfact[r]%MOD)*invfact[n-r]%MOD;
}
long long n,l,r,m=1,sm=0,p,c,s,a,b;
 
int main()
{
    std::ios_base::sync_with_stdio(false);
    int t;
    
    cin>>t;
    while(t--){
    sm=0;
    cin>>n;
    cin>>l;
    cin>>r;
    p=r-l+1;
    cout<<C(n+p,n);
  	//sm=(C(n+p,min(n,p))%MOD-1%MOD)%MOD;
  
    cout<<sm<<endl;
    
    }
    
    return 0;
}
